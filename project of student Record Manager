#include <stdio.h>
#include <string.h>

#define MAX 100

struct Student {
    int roll;
    char name[50];
    int marks;
};

struct Student students[MAX];
int n = 0;

void insertStudent(int roll, char name[], int marks) {
    if (n >= MAX) {
        printf("Array full!\n");
        return;
    }
    students[n].roll = roll;
    strcpy(students[n].name, name);
    students[n].marks = marks;
    n++;
    printf("Student inserted.\n");
}

void deleteStudent(int roll) {
    int i, j, found = 0;
    for (i = 0; i < n; i++) {
        if (students[i].roll == roll) {
            found = 1;
            for (j = i; j < n - 1; j++) {
                students[j] = students[j + 1];
            }
            n--;
            printf("Student deleted.\n");
            break;
        }
    }
    if (!found) printf("Roll No not found.\n");
}

void updateStudent(int roll, char name[], int marks) {
    for (int i = 0; i < n; i++) {
        if (students[i].roll == roll) {
            strcpy(students[i].name, name);
            students[i].marks = marks;
            printf("Student updated.\n");
            return;
        }
    }
    printf("Roll No not found.\n");
}

void displayAll() {
    if (n == 0) {
        printf("No records.\n");
        return;
    }
    printf("Roll\tName\tMarks\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%s\t%d\n", students[i].roll, students[i].name, students[i].marks);
    }
}

int linearSearch(int roll) {
    for (int i = 0; i < n; i++) {
        if (students[i].roll == roll) return i;
    }
    return -1;
}

int binarySearch(int roll) {
    int low = 0, high = n - 1, mid;
    while (low <= high) {
        mid = (low + high) / 2;
        if (students[mid].roll == roll) return mid;
        else if (students[mid].roll < roll) low = mid + 1;
        else high = mid - 1;
    }
    return -1;
}

int interpolationSearch(int roll) {
    int low = 0, high = n - 1, pos;
    while (low <= high && roll >= students[low].roll && roll <= students[high].roll) {
        if (low == high) {
            if (students[low].roll == roll) return low;
            return -1;
        }
        pos = low + ((roll - students[low].roll) * (high - low)) / 
                    (students[high].roll - students[low].roll);
        if (students[pos].roll == roll) return pos;
        if (students[pos].roll < roll) low = pos + 1;
        else high = pos - 1;
    }
    return -1;
}

void bubbleSortByMarks() {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (students[j].marks > students[j + 1].marks) {
                struct Student temp = students[j];
                students[j] = students[j + 1];
                students[j + 1] = temp;
            }
        }
    }
    printf("Sorted by Marks (Bubble Sort).\n");
}

void selectionSortByRoll() {
    for (int i = 0; i < n - 1; i++) {
        int min = i;
        for (int j = i + 1; j < n; j++) {
            if (students[j].roll < students[min].roll) min = j;
        }
        struct Student temp = students[i];
        students[i] = students[min];
        students[min] = temp;
    }
    printf("Sorted by Roll No (Selection Sort).\n");
}

void insertionSortByMarks() {
    for (int i = 1; i < n; i++) {
        struct Student key = students[i];
        int j = i - 1;
        while (j >= 0 && students[j].marks > key.marks) {
            students[j + 1] = students[j];
            j--;
        }
        students[j + 1] = key;
    }
    printf("Sorted by Marks (Insertion Sort).\n");
}

void quickSort(int low, int high) {
    if (low < high) {
        int i = low, j = high;
        int pivot = students[low].marks;
        struct Student temp;
        while (i < j) {
            while (students[i].marks <= pivot && i < high) i++;
            while (students[j].marks > pivot) j--;
            if (i < j) {
                temp = students[i];
                students[i] = students[j];
                students[j] = temp;
            }
        }
        temp = students[low];
        students[low] = students[j];
        students[j] = temp;
        quickSort(low, j - 1);
        quickSort(j + 1, high);
    }
}

void merge(int l, int m, int r) {
    int n1 = m - l + 1, n2 = r - m;
    struct Student L[n1], R[n2];
    for (int i = 0; i < n1; i++) L[i] = students[l + i];
    for (int j = 0; j < n2; j++) R[j] = students[m + 1 + j];
    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (L[i].roll <= R[j].roll) students[k++] = L[i++];
        else students[k++] = R[j++];
    }
    while (i < n1) students[k++] = L[i++];
    while (j < n2) students[k++] = R[j++];
}

void mergeSort(int l, int r) {
    if (l < r) {
        int m = (l + r) / 2;
        mergeSort(l, m);
        mergeSort(m + 1, r);
        merge(l, m, r);
    }
}

void filterByMarks(int threshold) {
    int found = 0;
    printf("Students with marks >= %d:\n", threshold);
    for (int i = 0; i < n; i++) {
        if (students[i].marks >= threshold) {
            printf("%d\t%s\t%d\n", students[i].roll, students[i].name, students[i].marks);
            found = 1;
        }
    }
    if (!found) printf("No students found.\n");
}

int main() {
    int choice, roll, marks, index, threshold;
    char name[50];

    do {
        printf("\n--- Student Record Manager ---\n");
        printf("1. Insert Student\n");
        printf("2. Delete Student\n");
        printf("3. Update Student\n");
        printf("4. Display All\n");
        printf("5. Linear Search\n");
        printf("6. Binary Search (sorted)\n");
        printf("7. Interpolation Search (sorted)\n");
        printf("8. Bubble Sort by Marks\n");
        printf("9. Selection Sort by Roll\n");
        printf("10. Insertion Sort by Marks\n");
        printf("11. Quick Sort by Marks\n");
        printf("12. Merge Sort by Roll\n");
        printf("13. Filter by Marks\n");
        printf("0. Exit\n");
        printf("Enter choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter Roll, Name, Marks: ");
                scanf("%d %s %d", &roll, name, &marks);
                insertStudent(roll, name, marks);
                break;
            case 2:
                printf("Enter Roll to delete: ");
                scanf("%d", &roll);
                deleteStudent(roll);
                break;
            case 3:
                printf("Enter Roll to update: ");
                scanf("%d", &roll);
                printf("Enter New Name, Marks: ");
                scanf("%s %d", name, &marks);
                updateStudent(roll, name, marks);
                break;
            case 4:
                displayAll();
                break;
            case 5:
                printf("Enter Roll to search: ");
                scanf("%d", &roll);
                index = linearSearch(roll);
                if (index != -1)
                    printf("Found: %d %s %d\n", students[index].roll, students[index].name, students[index].marks);
                else
                    printf("Not found.\n");
                break;
            case 6:
                printf("Enter Roll to search: ");
                scanf("%d", &roll);
                index = binarySearch(roll);
                if (index != -1)
                    printf("Found: %d %s %d\n", students[index].roll, students[index].name, students[index].marks);
                else
                    printf("Not found.\n");
                break;
            case 7:
                printf("Enter Roll to search: ");
                scanf("%d", &roll);
                index = interpolationSearch(roll);
                if (index != -1)
                    printf("Found: %d %s %d\n", students[index].roll, students[index].name, students[index].marks);
                else
                    printf("Not found.\n");
                break;
            case 8:
                bubbleSortByMarks();
                break;
            case 9:
                selectionSortByRoll();
                break;
            case 10:
                insertionSortByMarks();
                break;
            case 11:
                quickSort(0, n - 1);
                printf("Sorted by Marks (Quick Sort).\n");
                break;
            case 12:
                mergeSort(0, n - 1);
                printf("Sorted by Roll No (Merge Sort).\n");
                break;
            case 13:
                printf("Enter threshold marks: ");
                scanf("%d", &threshold);
                filterByMarks(threshold);
                break;
            case 0:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice!\n");
        }
    } while (choice != 0);

    return 0;
}
